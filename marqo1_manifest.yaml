---
# Source: marqo-kubernetes/templates/marqo-configmap.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
apiVersion: v1
kind: ConfigMap
metadata:
  name: marqo-config
data:
  VESPA_CONFIG_URL: "http://vespa-configserver-0.vespa-internal.default.svc.cluster.local:19071"
  VESPA_QUERY_URL: "http://vespa-query-0.vespa-internal.default.svc.cluster.local:8080"
  VESPA_DOCUMENT_URL: "http://vespa-feed-0.vespa-internal.default.svc.cluster.local:8080"
  MARQO_MODELS_TO_PRELOAD: '["hf/e5-small"]'
  MARQO_ENABLE_THROTTLING: "FALSE"
---
# Source: marqo-kubernetes/templates/vespa-configmap.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: v1
kind: ConfigMap
metadata:
  name: vespa-config
data:
  VESPA_CONFIGSERVERS: "vespa-configserver-0.vespa-internal.default.svc.cluster.local,vespa-configserver-1.vespa-internal.default.svc.cluster.local,vespa-configserver-2.vespa-internal.default.svc.cluster.local"
---
# Source: marqo-kubernetes/templates/marqo-service.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: v1
kind: Service
metadata:
  name: marqo
  labels:
    app: marqo
spec:
  type: LoadBalancer # Reachable from the internet
  selector:
    app: marqo
  ports:
    - name: api
      port: 8882
      targetPort: 8882
---
# Source: marqo-kubernetes/templates/vespa-headless.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: v1
kind: Service
metadata:
  name: vespa-internal
  labels:
    name: vespa-internal
spec:
  selector:
    name: vespa-internal
  clusterIP: None
---
# Source: marqo-kubernetes/templates/vespa-service-config.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: v1
kind: Service
metadata:
  name: vespa-configserver-service
  labels:
    app: vespa
spec:
  selector:
    app: vespa-configserver
  ports:
  - name: api
    port: 19071
    targetPort: 19071
---
# Source: marqo-kubernetes/templates/vespa-service-feed.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: v1
kind: Service
metadata:
  name: vespa-feed-service
  labels:
    app: vespa
spec:
  selector:
    app: vespa-feed
  ports:
  - name: api
    port: 8080
    targetPort: 8080
---
# Source: marqo-kubernetes/templates/vespa-service-query.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: v1
kind: Service
metadata:
  name: vespa-query-service
  labels:
    app: vespa
spec:
  selector:
    app: vespa-query
  ports:
  - name: api
    port: 8080
    targetPort: 8080
---
# Source: marqo-kubernetes/templates/marqo.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: marqo
  labels:
    name: marqo
    app: marqo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: marqo
      name: marqo
  serviceName: marqo
  template:
    metadata:
      labels:
        app: marqo
        name: marqo
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/nodegroup
                operator: In
                values:
                - marqonodes
      initContainers:
      - name: package-deployer
        image: busybox
        command:
        - /bin/sh
        - -c
        args:
        - |
         echo "Checking Vespa config server status..."
         while true
         do
           URL="http://vespa-configserver-0.vespa-internal.default.svc.cluster.local:19071/state/v1/health"
           echo "$URL"
           RESPONSE=$(wget -qO- "$URL" || true)
           echo "$RESPONSE"
           if echo "$RESPONSE" | grep -q "\"up\""
           then
             echo "Response contains \"up\", proceeding with package deployment"
             break
           else
             echo "Response does not contain \"up\", waiting 10 seconds and retrying"
           fi
           sleep 10
         done
         echo "Vespa config server online."
         echo "Setting up Vespa"
         mkdir package
         cd package
         mkdir schemas
         echo "Creating hosts.xml"
         echo "<hosts><host name='vespa-configserver-0.vespa-internal.default.svc.cluster.local'><alias>config0</alias></host><host name='vespa-configserver-1.vespa-internal.default.svc.cluster.local'><alias>config1</alias></host><host name='vespa-configserver-2.vespa-internal.default.svc.cluster.local'><alias>config2</alias></host><host name='vespa-admin-0.vespa-internal.default.svc.cluster.local'><alias>admin0</alias></host><host name='vespa-feed-0.vespa-internal.default.svc.cluster.local'><alias>feed0</alias></host><host name='vespa-query-0.vespa-internal.default.svc.cluster.local'><alias>query0</alias></host><host name='vespa-content-0.vespa-internal.default.svc.cluster.local'><alias>content0</alias></host><host name='vespa-content-1.vespa-internal.default.svc.cluster.local'><alias>content1</alias></host></hosts>" > hosts.xml
         cat hosts.xml
         echo "Creating services.xml"
         echo "<services version=\"1.0\"><admin version=\"2.0\"><configservers><configserver hostalias=\"config0\" /><configserver hostalias=\"config1\" /><configserver hostalias=\"config2\" /></configservers><cluster-controllers><cluster-controller hostalias=\"config0\" /><cluster-controller hostalias=\"config1\" /><cluster-controller hostalias=\"config2\" /></cluster-controllers><slobroks><slobrok hostalias=\"config0\" /><slobrok hostalias=\"config1\" /><slobrok hostalias=\"config2\" /></slobroks><adminserver hostalias=\"admin0\" /></admin><container id=\"feed\" version=\"1.0\"><document-api /><document-processing /><nodes><jvm gc-options=\"-XX:+UseParallelGC -XX:NewRatio=1 -XX:+PrintGC\" options=\"-XX:+PrintCommandLineFlags\" allocated-memory=\"50%\" /><node hostalias=\"feed0\" /></nodes></container><container id=\"query\" version=\"1.0\"><search /><nodes><node hostalias=\"query0\" /></nodes></container><content id=\"content_default\" version=\"1.0\"><redundancy>2</redundancy><documents><document type=\"marqo_settings\" mode=\"index\" /><document-processing cluster=\"feed\" /></documents><group><distribution partitions=\"1|*\" /><group name=\"group0\" distribution-key=\"0\"><node hostalias=\"content0\" distribution-key=\"0\" /></group><group name=\"group1\" distribution-key=\"1\"><node hostalias=\"content1\" distribution-key=\"1\" /></group></group></content></services>" > services.xml
         cat services.xml
         echo "Creating schemas/marqo_settings.sd";
         echo "schema marqo_settings { document marqo_settings { field id type string { indexing: attribute | summary } field settings type string { indexing: summary } } }" > schemas/marqo_settings.sd
         cat schemas/marqo_settings.sd
         echo "Zipping configs..."
         tar -czvf schema.tar.gz schemas/marqo_settings.sd hosts.xml services.xml
         echo "Sending config..."
         printf "POST /application/v2/tenant/default/prepareandactivate HTTP/1.0\nHost: vespa-configserver-0.vespa-internal.default.svc.cluster.local\nContent-Type: application/x-gzip\nContent-Length: " > headers.txt
         printf $(cat schema.tar.gz | wc -c) >> headers.txt
         printf "\n\n" >> headers.txt
         cat headers.txt
         cat schema.tar.gz
         cat headers.txt schema.tar.gz | nc -i 3 "vespa-configserver-0.vespa-internal.default.svc.cluster.local" 19071
         echo "Config sent..."
         sleep 10
         echo "Checking convergence..."
         while true
         do
           URL="http://vespa-configserver-0.vespa-internal.default.svc.cluster.local:19071/application/v2/tenant/default/application/default/environment/prod/region/default/instance/default/serviceconverge"
           echo "$URL"
           RESPONSE=$(wget -qO- "$URL" || true)
           echo "$RESPONSE"
           if echo "$RESPONSE" | grep -q "true"
           then
             echo "Response contains true, Vespa has converged"
             break
           else
             echo "Response does not contain true, waiting 10 seconds and retrying"
           fi
           sleep 10
         done
         echo "Vespa server converged."
         sleep 10
      containers:
        - name: marqo
          image: "docker.io/marqoai/marqo:2.0.0-gcp"
          args:
            - "name=marqo1"
            - "privileged"
            - "p=8882:8882"
            - "add-host=host.docker.internal:host-gateway"
            
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: marqo-config
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            requests:
              
              memory: 8G
              cpu: 1
            
          env:
          - name: LD_LIBRARY_PATH
            value: /usr/local/nvidia/lib64
  volumeClaimTemplates:
    - metadata:
        name: marqo-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 20Gi
---
# Source: marqo-kubernetes/templates/vespa-admin.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vespa-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vespa-admin
      name: vespa-internal
  serviceName: vespa-internal
  template:
    metadata:
      labels:
        app: vespa-admin
        name: vespa-internal
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/nodegroup
                operator: In
                values:
                - vespaadmin
      initContainers:
      - name: init-sysctl
        image: busybox
        imagePullPolicy: Always
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
        - name: vespa-admin
          image: "docker.io/vespaengine/vespa:8.279.6"
          args: ["services"]
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: vespa-config
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            requests:
                memory: 4G
---
# Source: marqo-kubernetes/templates/vespa-configserver.yml
# Copyright Vespa.ai. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vespa-configserver
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vespa-configserver
      name: vespa-internal
  serviceName: vespa-internal
  template:
    metadata:
      labels:
        app: vespa-configserver
        name: vespa-internal
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/nodegroup
                operator: In
                values:
                - configserver
      initContainers:
      - name: chown-var
        securityContext:
          runAsUser: 0
        image: busybox
        command: ["sh", "-c", "chown -R 1000 /opt/vespa/var"]
        volumeMounts:
          - name: vespa-var
            mountPath: /opt/vespa/var
      - name: chown-logs
        securityContext:
          runAsUser: 0
        image: busybox
        command: ["sh", "-c", "chown -R 1000 /opt/vespa/logs"]
        volumeMounts:
          - name: vespa-logs
            mountPath: /opt/vespa/logs
      - name: init-sysctl
        image: busybox
        imagePullPolicy: Always
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: vespa-configserver
        image: "docker.io/vespaengine/vespa:8.279.6"
        args: ["configserver,services"]
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1000
        volumeMounts:
        - name: vespa-var
          mountPath: /opt/vespa/var
        - name: vespa-logs
          mountPath: /opt/vespa/logs
        - name: vespa-workspace
          mountPath: /workspace
        envFrom:
        - configMapRef:
            name: vespa-config
        resources:
          requests:
            memory: 4G
  volumeClaimTemplates:
  - metadata:
      name: vespa-var
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: vespa-logs
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: vespa-workspace
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
# Source: marqo-kubernetes/templates/vespa-content.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vespa-content
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vespa-content
      name: vespa-internal
  serviceName: vespa-internal
  template:
    metadata:
      labels:
        app: vespa-content
        name: vespa-internal
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/nodegroup
                operator: In
                values:
                - vespacontent
      initContainers:
      - name: init-sysctl
        image: busybox
        imagePullPolicy: Always
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: vespa-content
        image: "docker.io/vespaengine/vespa:8.279.6"
        args: ["services"]
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: vespa-config
        securityContext:
          privileged: true
          runAsUser: 0
        volumeMounts:
          - name: vespa-var-content
            mountPath: /opt/vespa/var
        resources:
          requests:
            memory: 4G
  volumeClaimTemplates:
    - metadata:
        name: vespa-var-content
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 200Gi
---
# Source: marqo-kubernetes/templates/vespa-feed.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vespa-feed
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vespa-feed
      name: vespa-internal
  serviceName: vespa-internal
  template:
    metadata:
      labels:
        app: vespa-feed
        name: vespa-internal
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/nodegroup
                operator: In
                values:
                - vespafeed
      initContainers:
      - name: init-sysctl
        image: busybox
        imagePullPolicy: Always
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: vespa-feed
        image: "docker.io/vespaengine/vespa:8.279.6"
        args: ["services"]
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: vespa-config
        securityContext:
          privileged: true
          runAsUser: 0
        resources:
          requests:
              memory: 4G
---
# Source: marqo-kubernetes/templates/vespa-query.yml
# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vespa-query
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vespa-query
      name: vespa-internal
  serviceName: vespa-internal
  template:
    metadata:
      labels:
        app: vespa-query
        name: vespa-internal
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/nodegroup
                operator: In
                values:
                - vespaquery
      initContainers:
      - name: init-sysctl
        image: busybox
        imagePullPolicy: Always
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: vespa-query
        image: "docker.io/vespaengine/vespa:8.279.6"
        args: ["services"]
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: vespa-config
        securityContext:
          privileged: true
          runAsUser: 0
        resources:
          requests:
              memory: 4G
